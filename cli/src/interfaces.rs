#![allow(unused_imports)]
// This code was autogenerated with `dbus-codegen-rust `, see https://github.com/diwic/dbus-rs
use dbus;
use dbus::arg;
use dbus::blocking;

pub trait ComMusikidFancy {
    fn set_target_fan_speed(&self, index: u8, speed: f64) -> Result<(), dbus::Error>;
    fn fans_speeds(&self) -> Result<::std::collections::HashMap<String, f64>, dbus::Error>;
    fn target_fans_speeds(&self) -> Result<Vec<f64>, dbus::Error>;
    fn set_target_fans_speeds(&self, value: Vec<f64>) -> Result<(), dbus::Error>;
    fn config(&self) -> Result<String, dbus::Error>;
    fn set_config(&self, value: String) -> Result<(), dbus::Error>;
    fn auto(&self) -> Result<bool, dbus::Error>;
    fn set_auto(&self, value: bool) -> Result<(), dbus::Error>;
    fn critical(&self) -> Result<bool, dbus::Error>;
    fn temperatures(&self) -> Result<::std::collections::HashMap<String, f64>, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target = blocking::Connection>> ComMusikidFancy
    for blocking::Proxy<'a, C>
{
    fn set_target_fan_speed(&self, index: u8, speed: f64) -> Result<(), dbus::Error> {
        self.method_call("com.musikid.fancy", "SetTargetFanSpeed", (index, speed))
    }

    fn fans_speeds(&self) -> Result<::std::collections::HashMap<String, f64>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "com.musikid.fancy",
            "FansSpeeds",
        )
    }

    fn target_fans_speeds(&self) -> Result<Vec<f64>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "com.musikid.fancy",
            "TargetFansSpeeds",
        )
    }

    fn config(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "com.musikid.fancy",
            "Config",
        )
    }

    fn auto(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "com.musikid.fancy",
            "Auto",
        )
    }

    fn critical(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "com.musikid.fancy",
            "Critical",
        )
    }

    fn temperatures(&self) -> Result<::std::collections::HashMap<String, f64>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "com.musikid.fancy",
            "Temperatures",
        )
    }

    fn set_target_fans_speeds(&self, value: Vec<f64>) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "com.musikid.fancy",
            "TargetFansSpeeds",
            value,
        )
    }

    fn set_config(&self, value: String) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "com.musikid.fancy",
            "Config",
            value,
        )
    }

    fn set_auto(&self, value: bool) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "com.musikid.fancy",
            "Auto",
            value,
        )
    }
}
