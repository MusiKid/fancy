name: Build releases
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  create_release:
    runs-on: ubuntu-latest
    name: Create release
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v1
        id: git-cliff
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGELOG.md

      - name: Set the release body
        id: release
        shell: bash
        run: |
          r=$(cat ${{ steps.git-cliff.outputs.changelog }})
          r="${r//'%'/'%25'}"     # Multiline escape sequences for %
          r="${r//$'\n'/'%0A'}"   # Multiline escape sequences for '\n'
          r="${r//$'\r'/'%0D'}"   # Multiline escape sequences for '\r'
          echo "::set-output name=RELEASE_BODY::$r"

      - uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.release.outputs.RELEASE_BODY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  make-archive:
    runs-on: ubuntu-latest
    name: Build archive
    needs: create_release
    steps:
      - uses: actions/checkout@v2

      - name: Install required packages
        run: |
          sudo apt-get update && sudo apt-get install -y devscripts equivs --no-install-recommends
          sudo mk-build-deps --install --build-dep -t "apt-get -o Debug::pkgProblemResolver=yes -y --no-install-recommends" debian/control

      - name: Set variables
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          REL_DESTDIR="fancy-$VERSION"
          echo "DESTDIR=$PWD/$REL_DESTDIR" >> $GITHUB_ENV
          echo "REL_DESTDIR=$REL_DESTDIR" >> $GITHUB_ENV
          echo "OUTPUT_FILE=$REL_DESTDIR.tar.xz" >> $GITHUB_ENV

      - name: Create DESTDIR folder
        run: mkdir -p $DESTDIR

      - name: Build
        run: make && make install DESTDIR=$DESTDIR

      - name: Make archive
        run: tar czf $OUTPUT_FILE $REL_DESTDIR

      - name: Upload archive
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.OUTPUT_FILE }}

  make-rpm:
    runs-on: ubuntu-latest
    container: fedora:latest
    name: Build RPM package
    needs: create_release
    steps:
      - run: dnf install -y git
      - uses: actions/checkout@v2

      - name: Install required packages
        run: "dnf install -y rpkg copr-cli && dnf builddep -y $(rpkg spec | cut -d':' -f2 | tr -d '[:space:]')"

      - name: Save COPR config
        env:
          COPR_CONFIG_TOKEN: ${{ secrets.COPR_CONFIG_TOKEN }}
        run: |
          mkdir -p $HOME/.config/
          echo "$COPR_CONFIG_TOKEN" > $HOME/.config/copr

      - name: Set tempdir
        run: echo "tempdir=$(mktemp -d)" >> $GITHUB_ENV

      - name: Build package for COPR
        run: rpkg build Fancy

      - name: Build package for GitHub
        run: "rpkg local --outdir=$tempdir"

      - name: Upload package
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: "${{ env.tempdir }}/**/*.rpm"

  make-deb:
    runs-on: ubuntu-latest
    name: Build Debian package
    needs: create_release
    steps:
      - uses: actions/checkout@v2

      - name: Install required packages
        run: |
          sudo apt-get update && sudo apt-get install -y devscripts equivs --no-install-recommends
          sudo mk-build-deps --install --build-dep -t "apt-get -o Debug::pkgProblemResolver=yes -y --no-install-recommends" debian/control

      - name: Build the package
        run: dpkg-buildpackage --no-sign

      - name: Upload Debian package
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: "../*.deb"
